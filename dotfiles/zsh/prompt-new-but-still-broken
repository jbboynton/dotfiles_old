# Helpers
# -------

prompt_spaced() { [[ -n "$1" ]] && print " $@" }
# Appears at the start of the prompt

prompt_start_char() {
  local start_char

  start_char=" "

  # Don't print a space before the start-of-line char
  print "$start_char"
}

# Appears at the end of the prompt
prompt_user_char() {
  local user_char

  # user_char="\uD83E\uDC62"
  user_char="!"

#  prompt_spaced "$user_char"

  print "$user_char"
}

# The current path, "~" denoting the home path
prompt_short_path() { print "%~" }

test_func() { print "$$$$" }
# Git
# ---

autoload -Uz vcs_info

zstyle ':vcs_info:*' enable git
# TODO: does this conflict with the Terminator pallate?
# zstyle ':vcs_info:git*' formats $(prompt_blue "%b")
# zstyle ':vcs_info:git*' actionformats $(prompt_red "%b|%a")

# Assigns a character to be displayed in the prompt to indicate the git status
prompt_git_status_char() {
  local status_char
# http://www.fileformat.info/info/unicode/char/1d10d/index.htm
  local not_staged_char="\uD834\uDD0D"
# http://www.fileformat.info/info/unicode/char/1d10e/index.htm
  local staged_char="\uD834\uDD0E"
# local untracked_char=?    # Not currently in use
  local clean_dir_char=""  

  case $(prompt_git_status) in
    changed) status_char=$(not_staged_char);;
  # changed) status_char=$(prompt_red $not_staged);; TODO:terminatorColorsOk?
    staged) status_char=$(staged_char);; 
    unchanged) status_char=$(clean_dir_char);;
  esac

  prompt_spaced "$status_char"
}

# Checks the status of the current repo
prompt_git_status() {
  local git_status="($cat "/tmp/git-status-$$")"  
  if print "$git_status" | command grep -qF "Changes not staged" ; then
    print "changed"
  elif print "$git_status" | command grep -qF "Changes to be committed" ; then
    print "staged"
  elif print "$git_status" | command grep -qF "Untracked files" ; then
      print "untracked"
  elif print "$git_status" | command grep -qF "Working directory clean" ; then
     print "unchanged"
  fi
}

# Builds the git portion of the final prompt
prompt_git_branch() {
# vcs_info_msg_0_ is set by the `zstyle vcs_info` directives
  local branch_name="$vcs_info_msg_0_"
  prompt_spaced "$branch_name"
}

# Display git info (if applicable)
prompt_git() {
  if [[ -n "$vcs_info_msg_0_" ]]; then
    prompt_spaced $(prompt_git_branch) $(prompt_git_status_char)
  fi
}

# Precmd runs before the prompt is evaluated
function precmd {
  vcs_info
  git_status 2> /dev/null >! "/tmp/git-status-$$"
}

setopt prompt_subst

#PROMPT='$(prompt_start_char) $(prompt_short_path) $(prompt_git) $(prompt_user_char) '
PROMPT='$(prompt_short_path) $(test_func) $(prompt_git) ${prompt_user_char} '
